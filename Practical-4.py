'''Name:Savi Solanki
Batch:B3
Roll no:59
Pract no 3: Generating the n gram model using nltk'''


from nltk import ngrams

from nltk.util import ngrams
#unigram model
n = 1
sentence = 'While unigram model sentences will only exclude the UNK token, models will also exclude all other words already in the sentence.NTK provides another function everygrams that converts a sentence into unigram, bigram, trigram, and so on till the ngrams, where n is the length of the sentence. In short, this function generates ngrams for all possible values of n.'
unigrams = ngrams(sentence.split(), n)

for item in unigrams:
    print(item)
#bigram model
n = 2
sentence = 'While unigram model sentences will only exclude the UNK token, models will also exclude all other words already in the sentence.NTK provides another function everygrams that converts a sentence into unigram, bigram, trigram, and so on till the ngrams, where n is the length of the sentence. In short, this function generates ngrams for all possible values of n.'
unigrams = ngrams(sentence.split(), n)

for item in unigrams:
    print(item)
#trigram model
n = 3
sentence = 'While unigram model sentences will only exclude the UNK token, models will also exclude all other words already in the sentence.NTK provides another function everygrams that converts a sentence into unigram, bigram, trigram, and so on till the ngrams, where n is the length of the sentence. In short, this function generates ngrams for all possible values of n.'
unigrams = ngrams(sentence.split(), n)

for item in unigrams:
    print(item)

#using text file input
from nltk import ngrams
file = open("Input.txt")
for i in file.readlines():
    cumulative = i
    sentences = i.split(".")
    counter = 0
    for sentence in sentences:
        print("For sentence", counter + 1, ", trigrams are: ")
        trigrams = ngrams(sentence.split(" "), 3)
        for grams in trigrams:
            print(grams)
        counter += 1
        print()
        
#  #output    
# ('While',)
# ('unigram',)  
# ('model',)    
# ('sentences',)
# ('will',)     
# ('only',)     
# ('exclude',)  
# ('the',)      
# ('UNK',)      
# ('token,',)   
# ('models',)   
# ('will',)
# ('also',)
# ('exclude',)
# ('all',)
# ('other',)
# ('words',)
# ('already',)
# ('in',)
# ('the',)
# ('sentence.NTK',)
# ('provides',)
# ('another',)
# ('function',)
# ('everygrams',)
# ('that',)
# ('converts',)
# ('a',)
# ('sentence',)
# ('into',)
# ('unigram,',)
# ('bigram,',)
# ('trigram,',)
# ('and',)
# ('so',)
# ('on',)
# ('till',)
# ('the',)
# ('ngrams,',)
# ('where',)
# ('n',)
# ('is',)
# ('the',)
# ('length',)
# ('of',)
# ('the',)
# ('sentence.',)
# ('In',)
# ('short,',)
# ('this',)
# ('function',)
# ('generates',)
# ('ngrams',)
# ('for',)
# ('all',)
# ('possible',)
# ('values',)
# ('of',)
# ('n.',)
# ('While', 'unigram')
# ('unigram', 'model')
# ('model', 'sentences')
# ('sentences', 'will')
# ('will', 'only')
# ('only', 'exclude')
# ('exclude', 'the')
# ('the', 'UNK')
# ('UNK', 'token,')
# ('token,', 'models')
# ('models', 'will')
# ('will', 'also')
# ('also', 'exclude')
# ('exclude', 'all')
# ('all', 'other')
# ('other', 'words')
# ('words', 'already')
# ('already', 'in')
# ('in', 'the')
# ('the', 'sentence.NTK')
# ('sentence.NTK', 'provides')
# ('provides', 'another')
# ('another', 'function')
# ('function', 'everygrams')
# ('everygrams', 'that')
# ('that', 'converts')
# ('converts', 'a')
# ('a', 'sentence')
# ('sentence', 'into')
# ('into', 'unigram,')
# ('unigram,', 'bigram,')
# ('bigram,', 'trigram,')
# ('trigram,', 'and')
# ('and', 'so')
# ('so', 'on')
# ('on', 'till')
# ('till', 'the')
# ('the', 'ngrams,')
# ('ngrams,', 'where')
# ('where', 'n')
# ('n', 'is')
# ('is', 'the')
# ('the', 'length')
# ('length', 'of')
# ('of', 'the')
# ('the', 'sentence.')
# ('sentence.', 'In')
# ('In', 'short,')
# ('short,', 'this')
# ('this', 'function')
# ('function', 'generates')
# ('generates', 'ngrams')
# ('ngrams', 'for')
# ('for', 'all')
# ('all', 'possible')
# ('possible', 'values')
# ('values', 'of')
# ('of', 'n.')
# ('While', 'unigram', 'model')
# ('unigram', 'model', 'sentences')
# ('model', 'sentences', 'will')
# ('sentences', 'will', 'only')
# ('will', 'only', 'exclude')
# ('only', 'exclude', 'the')
# ('exclude', 'the', 'UNK')
# ('the', 'UNK', 'token,')
# ('UNK', 'token,', 'models')
# ('token,', 'models', 'will')
# ('models', 'will', 'also')
# ('will', 'also', 'exclude')
# ('also', 'exclude', 'all')
# ('exclude', 'all', 'other')
# ('all', 'other', 'words')
# ('other', 'words', 'already')
# ('words', 'already', 'in')
# ('already', 'in', 'the')
# ('in', 'the', 'sentence.NTK')
# ('the', 'sentence.NTK', 'provides')
# ('sentence.NTK', 'provides', 'another')
# ('provides', 'another', 'function')
# ('another', 'function', 'everygrams')
# ('function', 'everygrams', 'that')
# ('everygrams', 'that', 'converts')
# ('that', 'converts', 'a')
# ('converts', 'a', 'sentence')
# ('a', 'sentence', 'into')
# ('sentence', 'into', 'unigram,')
# ('into', 'unigram,', 'bigram,')
# ('unigram,', 'bigram,', 'trigram,')
# ('bigram,', 'trigram,', 'and')
# ('trigram,', 'and', 'so')
# ('and', 'so', 'on')
# ('so', 'on', 'till')
# ('on', 'till', 'the')
# ('till', 'the', 'ngrams,')
# ('the', 'ngrams,', 'where')
# ('ngrams,', 'where', 'n')
# ('where', 'n', 'is')
# ('n', 'is', 'the')
# ('is', 'the', 'length')
# ('the', 'length', 'of')
# ('length', 'of', 'the')
# ('of', 'the', 'sentence.')
# ('the', 'sentence.', 'In')
# ('sentence.', 'In', 'short,')
# ('In', 'short,', 'this')
# ('short,', 'this', 'function')
# ('this', 'function', 'generates')
# ('function', 'generates', 'ngrams')
# ('generates', 'ngrams', 'for')
# ('ngrams', 'for', 'all')
# ('for', 'all', 'possible')
# ('all', 'possible', 'values')
# ('possible', 'values', 'of')
# ('values', 'of', 'n.')
# For sentence 1 , trigrams are:
# ('In', 'the', 'ever-evolving')
# ('the', 'ever-evolving', 'landscape')
# ('ever-evolving', 'landscape', 'of')
# ('landscape', 'of', 'technology,')
# ('of', 'technology,', 'artificial')
# ('technology,', 'artificial', 'intelligence')
# ('artificial', 'intelligence', '(AI)')
# ('intelligence', '(AI)', 'stands')
# ('(AI)', 'stands', 'as')
# ('stands', 'as', 'a')
# ('as', 'a', 'pioneering')
# ('a', 'pioneering', 'force,')
# ('pioneering', 'force,', 'weaving')
# ('force,', 'weaving', 'its')
# ('weaving', 'its', 'intricate')
# ('its', 'intricate', 'threads')
# ('intricate', 'threads', 'through')
# ('threads', 'through', 'the')
# ('through', 'the', 'fabric')
# ('the', 'fabric', 'of')
# ('fabric', 'of', 'our')
# ('of', 'our', 'daily')
# ('our', 'daily', 'lives')

# For sentence 2 , trigrams are:
# ('', 'From', 'personalized')
# ('From', 'personalized', 'recommendations')
# ('personalized', 'recommendations', 'on')
# ('recommendations', 'on', 'streaming')
# ('on', 'streaming', 'platforms')
# ('streaming', 'platforms', 'to')
# ('platforms', 'to', 'the')
# ('to', 'the', 'precision')
# ('the', 'precision', 'of')
# ('precision', 'of', 'autonomous')
# ('of', 'autonomous', 'vehicles,')
# ('autonomous', 'vehicles,', 'AI')
# ('vehicles,', 'AI', 'has')
# ('AI', 'has', 'transcended')
# ('has', 'transcended', 'its')
# ('transcended', 'its', 'theoretical')
# ('its', 'theoretical', 'roots')
# ('theoretical', 'roots', 'to')
# ('roots', 'to', 'become')
# ('to', 'become', 'an')
# ('become', 'an', 'indispensable')
# ('an', 'indispensable', 'companion')
# ('indispensable', 'companion', 'in')
# ('companion', 'in', 'the')
# ('in', 'the', 'journey')
# ('the', 'journey', 'of')
# ('journey', 'of', 'human')
# ('of', 'human', 'progress')

# For sentence 3 , trigrams are:
# ('', 'Its', 'algorithms,')
# ('Its', 'algorithms,', 'fueled')
# ('algorithms,', 'fueled', 'by')
# ('fueled', 'by', 'vast')
# ('by', 'vast', 'datasets')
# ('vast', 'datasets', 'and')
# ('datasets', 'and', 'computational')
# ('and', 'computational', 'prowess,')
# ('computational', 'prowess,', 'sift')
# ('prowess,', 'sift', 'through')
# ('sift', 'through', 'information')
# ('through', 'information', 'with')
# ('information', 'with', 'a')
# ('with', 'a', 'dexterity')
# ('a', 'dexterity', 'that')
# ('dexterity', 'that', 'mirrors')
# ('that', 'mirrors', 'the')
# ('mirrors', 'the', 'complexity')
# ('the', 'complexity', 'of')
# ('complexity', 'of', 'human')
# ('of', 'human', 'cognition')

# For sentence 4 , trigrams are:
# ('', 'Yet,', 'the')
# ('Yet,', 'the', 'enigma')
# ('the', 'enigma', 'persistsâ€”AI')
# ('enigma', 'persistsâ€”AI', 'both')
# ('persistsâ€”AI', 'both', 'captivates')
# ('both', 'captivates', 'with')
# ('captivates', 'with', 'its')
# ('with', 'its', 'potential')
# ('its', 'potential', 'for')
# ('potential', 'for', 'innovation')
# ('for', 'innovation', 'and')
# ('innovation', 'and', 'raises')
# ('and', 'raises', 'questions')
# ('raises', 'questions', 'about')
# ('questions', 'about', 'ethics')
# ('about', 'ethics', 'and')
# ('ethics', 'and', 'the')
# ('and', 'the', 'boundaries')
# ('the', 'boundaries', 'of')
# ('boundaries', 'of', 'machine')
# ('of', 'machine', 'intelligence')

# For sentence 5 , trigrams are:
# ('', 'As', 'we')
# ('As', 'we', 'navigate')
# ('we', 'navigate', 'this')
# ('navigate', 'this', 'realm')
# ('this', 'realm', 'of')
# ('realm', 'of', 'algorithms')
# ('of', 'algorithms', 'and')
# ('algorithms', 'and', 'neural')
# ('and', 'neural', 'networks,')
# ('neural', 'networks,', 'the')
# ('networks,', 'the', 'intersection')
# ('the', 'intersection', 'of')
# ('intersection', 'of', 'human')
# ('of', 'human', 'ingenuity')
# ('human', 'ingenuity', 'and')
# ('ingenuity', 'and', 'artificial')
# ('and', 'artificial', 'brilliance')
# ('artificial', 'brilliance', 'unfolds,')
# ('brilliance', 'unfolds,', 'promising')
# ('unfolds,', 'promising', 'a')
# ('promising', 'a', 'future')
# ('a', 'future', 'where')
# ('future', 'where', 'the')
# ('where', 'the', 'boundaries')
# ('the', 'boundaries', 'between')
# ('boundaries', 'between', 'the')
# ('between', 'the', 'natural')
# ('the', 'natural', 'and')
# ('natural', 'and', 'the')
# ('and', 'the', 'artificial')
# ('the', 'artificial', 'blur')
# ('artificial', 'blur', 'into')
# ('blur', 'into', 'a')
# ('into', 'a', 'tapestry')
# ('a', 'tapestry', 'of')
# ('tapestry', 'of', 'unprecedented')
# ('of', 'unprecedented', 'possibilities')

